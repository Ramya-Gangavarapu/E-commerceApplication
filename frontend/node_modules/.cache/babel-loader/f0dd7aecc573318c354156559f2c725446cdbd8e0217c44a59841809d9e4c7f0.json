{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramya\\\\e-commerce-platform\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create Cart Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\n\n// Cart Provider Component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize cart state with data from localStorage or an empty array\n  const [cart, setCart] = useState(() => {\n    const savedCart = localStorage.getItem('cart');\n    return savedCart ? JSON.parse(savedCart) : [];\n  });\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }, [cart]);\n\n  // Add item to cart\n  const addToCart = product => {\n    setCart(prevCart => {\n      // Check if the product is already in the cart\n      const existingProduct = prevCart.find(item => item.id === product.id);\n      if (existingProduct) {\n        // Update the quantity if the product is already in the cart\n        return prevCart.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      }\n      // Add new product to the cart\n      return [...prevCart, {\n        ...product,\n        quantity: 1\n      }];\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = productId => {\n    setCart(prevCart => prevCart.filter(item => item.id !== productId));\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setCart([]);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      removeFromCart,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"VaKz0SF7fD34civ62eqIzudNnkU=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cart","setCart","savedCart","localStorage","getItem","JSON","parse","setItem","stringify","addToCart","product","prevCart","existingProduct","find","item","id","map","quantity","removeFromCart","productId","filter","clearCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ramya/e-commerce-platform/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Create Cart Context\r\nexport const CartContext = createContext();\r\n\r\n// Cart Provider Component\r\nexport const CartProvider = ({ children }) => {\r\n  // Initialize cart state with data from localStorage or an empty array\r\n  const [cart, setCart] = useState(() => {\r\n    const savedCart = localStorage.getItem('cart');\r\n    return savedCart ? JSON.parse(savedCart) : [];\r\n  });\r\n\r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n  }, [cart]);\r\n\r\n  // Add item to cart\r\n  const addToCart = (product) => {\r\n    setCart((prevCart) => {\r\n      // Check if the product is already in the cart\r\n      const existingProduct = prevCart.find((item) => item.id === product.id);\r\n      if (existingProduct) {\r\n        // Update the quantity if the product is already in the cart\r\n        return prevCart.map((item) =>\r\n          item.id === product.id\r\n            ? { ...item, quantity: item.quantity + 1 }\r\n            : item\r\n        );\r\n      }\r\n      // Add new product to the cart\r\n      return [...prevCart, { ...product, quantity: 1 }];\r\n    });\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeFromCart = (productId) => {\r\n    setCart((prevCart) => prevCart.filter(item => item.id !== productId));\r\n  };\r\n\r\n  // Clear cart\r\n  const clearCart = () => {\r\n    setCart([]);\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{ cart, addToCart, removeFromCart, clearCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACrC,MAAMU,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,OAAOF,SAAS,GAAGG,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,GAAG,EAAE;EAC/C,CAAC,CAAC;;EAEF;EACAT,SAAS,CAAC,MAAM;IACdU,YAAY,CAACI,OAAO,CAAC,MAAM,EAAEF,IAAI,CAACG,SAAS,CAACR,IAAI,CAAC,CAAC;EACpD,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMS,SAAS,GAAIC,OAAO,IAAK;IAC7BT,OAAO,CAAEU,QAAQ,IAAK;MACpB;MACA,MAAMC,eAAe,GAAGD,QAAQ,CAACE,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MACvE,IAAIH,eAAe,EAAE;QACnB;QACA,OAAOD,QAAQ,CAACK,GAAG,CAAEF,IAAI,IACvBA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,GAClB;UAAE,GAAGD,IAAI;UAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,GAAG;QAAE,CAAC,GACxCH,IACN,CAAC;MACH;MACA;MACA,OAAO,CAAC,GAAGH,QAAQ,EAAE;QAAE,GAAGD,OAAO;QAAEO,QAAQ,EAAE;MAAE,CAAC,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMC,cAAc,GAAIC,SAAS,IAAK;IACpClB,OAAO,CAAEU,QAAQ,IAAKA,QAAQ,CAACS,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKI,SAAS,CAAC,CAAC;EACvE,CAAC;;EAED;EACA,MAAME,SAAS,GAAGA,CAAA,KAAM;IACtBpB,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,IAAI;MAAES,SAAS;MAAES,cAAc;MAAEG;IAAU,CAAE;IAAAvB,QAAA,EACzEA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC5B,EAAA,CA7CWF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}